// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: pb/entity.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//商品
type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    //商品id
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //商品名称
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//通过流的方式返回天气
type StreamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*WeatherResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *StreamResp) Reset() {
	*x = StreamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResp) ProtoMessage() {}

func (x *StreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResp.ProtoReflect.Descriptor instead.
func (*StreamResp) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{1}
}

func (x *StreamResp) GetResults() []*WeatherResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

//城市请求体
type CityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Province string `protobuf:"bytes,1,opt,name=province,proto3" json:"province,omitempty"`
}

func (x *CityRequest) Reset() {
	*x = CityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityRequest) ProtoMessage() {}

func (x *CityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityRequest.ProtoReflect.Descriptor instead.
func (*CityRequest) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{2}
}

func (x *CityRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

//城市返回体
type CityResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cityname string `protobuf:"bytes,1,opt,name=cityname,proto3" json:"cityname,omitempty"`
}

func (x *CityResp) Reset() {
	*x = CityResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityResp) ProtoMessage() {}

func (x *CityResp) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityResp.ProtoReflect.Descriptor instead.
func (*CityResp) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{3}
}

func (x *CityResp) GetCityname() string {
	if x != nil {
		return x.Cityname
	}
	return ""
}

//天气预报result字段
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City     string    `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Realtime *Realtime `protobuf:"bytes,2,opt,name=realtime,proto3" json:"realtime,omitempty"`
	Future   []*Future `protobuf:"bytes,3,rep,name=future,proto3" json:"future,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{4}
}

func (x *Result) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Result) GetRealtime() *Realtime {
	if x != nil {
		return x.Realtime
	}
	return nil
}

func (x *Result) GetFuture() []*Future {
	if x != nil {
		return x.Future
	}
	return nil
}

//天气预报实时字段
type Realtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature string `protobuf:"bytes,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Humidity    string `protobuf:"bytes,2,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Info        string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Wid         string `protobuf:"bytes,4,opt,name=wid,proto3" json:"wid,omitempty"`
	Direct      string `protobuf:"bytes,5,opt,name=direct,proto3" json:"direct,omitempty"`
	Power       string `protobuf:"bytes,6,opt,name=power,proto3" json:"power,omitempty"`
	Aqi         string `protobuf:"bytes,7,opt,name=aqi,proto3" json:"aqi,omitempty"`
}

func (x *Realtime) Reset() {
	*x = Realtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Realtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Realtime) ProtoMessage() {}

func (x *Realtime) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Realtime.ProtoReflect.Descriptor instead.
func (*Realtime) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{5}
}

func (x *Realtime) GetTemperature() string {
	if x != nil {
		return x.Temperature
	}
	return ""
}

func (x *Realtime) GetHumidity() string {
	if x != nil {
		return x.Humidity
	}
	return ""
}

func (x *Realtime) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Realtime) GetWid() string {
	if x != nil {
		return x.Wid
	}
	return ""
}

func (x *Realtime) GetDirect() string {
	if x != nil {
		return x.Direct
	}
	return ""
}

func (x *Realtime) GetPower() string {
	if x != nil {
		return x.Power
	}
	return ""
}

func (x *Realtime) GetAqi() string {
	if x != nil {
		return x.Aqi
	}
	return ""
}

type Wid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   string `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Night string `protobuf:"bytes,2,opt,name=night,proto3" json:"night,omitempty"`
}

func (x *Wid) Reset() {
	*x = Wid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wid) ProtoMessage() {}

func (x *Wid) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wid.ProtoReflect.Descriptor instead.
func (*Wid) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{6}
}

func (x *Wid) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *Wid) GetNight() string {
	if x != nil {
		return x.Night
	}
	return ""
}

//天气预报未来预报
type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date        string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Temperature string `protobuf:"bytes,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Weather     string `protobuf:"bytes,3,opt,name=weather,proto3" json:"weather,omitempty"`
	Wid         *Wid   `protobuf:"bytes,4,opt,name=wid,proto3" json:"wid,omitempty"`
	Direct      string `protobuf:"bytes,5,opt,name=direct,proto3" json:"direct,omitempty"`
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{7}
}

func (x *Future) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Future) GetTemperature() string {
	if x != nil {
		return x.Temperature
	}
	return ""
}

func (x *Future) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *Future) GetWid() *Wid {
	if x != nil {
		return x.Wid
	}
	return nil
}

func (x *Future) GetDirect() string {
	if x != nil {
		return x.Direct
	}
	return ""
}

//天气预报返回实体
type WeatherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason    string  `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Result    *Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode int64   `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *WeatherResponse) Reset() {
	*x = WeatherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherResponse) ProtoMessage() {}

func (x *WeatherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherResponse.ProtoReflect.Descriptor instead.
func (*WeatherResponse) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{8}
}

func (x *WeatherResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WeatherResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *WeatherResponse) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

//天气预报请求实体
type WeatherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City     string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Key      string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Province string `protobuf:"bytes,3,opt,name=province,proto3" json:"province,omitempty"`
}

func (x *WeatherRequest) Reset() {
	*x = WeatherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_entity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherRequest) ProtoMessage() {}

func (x *WeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_entity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherRequest.ProtoReflect.Descriptor instead.
func (*WeatherRequest) Descriptor() ([]byte, []int) {
	return file_pb_entity_proto_rawDescGZIP(), []int{9}
}

func (x *WeatherRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *WeatherRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WeatherRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

var File_pb_entity_proto protoreflect.FileDescriptor

var file_pb_entity_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x2d, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x08,
	0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x77, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x71, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x71,
	0x69, 0x22, 0x2d, 0x0a, 0x03, 0x57, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x06, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x03, 0x77,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69,
	0x64, 0x52, 0x03, 0x77, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x6c,
	0x0a, 0x0f, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x0e,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x32, 0x8e, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x28, 0x01, 0x12, 0x31, 0x0a, 0x0e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x42, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x30, 0x01, 0x12, 0x33, 0x0a, 0x13,
	0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pb_entity_proto_rawDescOnce sync.Once
	file_pb_entity_proto_rawDescData = file_pb_entity_proto_rawDesc
)

func file_pb_entity_proto_rawDescGZIP() []byte {
	file_pb_entity_proto_rawDescOnce.Do(func() {
		file_pb_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_entity_proto_rawDescData)
	})
	return file_pb_entity_proto_rawDescData
}

var file_pb_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pb_entity_proto_goTypes = []interface{}{
	(*Product)(nil),         // 0: pb.Product
	(*StreamResp)(nil),      // 1: pb.StreamResp
	(*CityRequest)(nil),     // 2: pb.CityRequest
	(*CityResp)(nil),        // 3: pb.CityResp
	(*Result)(nil),          // 4: pb.Result
	(*Realtime)(nil),        // 5: pb.Realtime
	(*Wid)(nil),             // 6: pb.Wid
	(*Future)(nil),          // 7: pb.Future
	(*WeatherResponse)(nil), // 8: pb.WeatherResponse
	(*WeatherRequest)(nil),  // 9: pb.WeatherRequest
}
var file_pb_entity_proto_depIdxs = []int32{
	8,  // 0: pb.StreamResp.results:type_name -> pb.WeatherResponse
	5,  // 1: pb.Result.realtime:type_name -> pb.Realtime
	7,  // 2: pb.Result.future:type_name -> pb.Future
	6,  // 3: pb.Future.wid:type_name -> pb.Wid
	4,  // 4: pb.WeatherResponse.result:type_name -> pb.Result
	9,  // 5: pb.Query.GetByName:input_type -> pb.WeatherRequest
	9,  // 6: pb.Query.GetById:input_type -> pb.WeatherRequest
	9,  // 7: pb.Query.GetByStream:input_type -> pb.WeatherRequest
	2,  // 8: pb.Query.ReturnByStream:input_type -> pb.CityRequest
	0,  // 9: pb.Query.BidirectionalStream:input_type -> pb.Product
	8,  // 10: pb.Query.GetByName:output_type -> pb.WeatherResponse
	8,  // 11: pb.Query.GetById:output_type -> pb.WeatherResponse
	1,  // 12: pb.Query.GetByStream:output_type -> pb.StreamResp
	3,  // 13: pb.Query.ReturnByStream:output_type -> pb.CityResp
	0,  // 14: pb.Query.BidirectionalStream:output_type -> pb.Product
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_pb_entity_proto_init() }
func file_pb_entity_proto_init() {
	if File_pb_entity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Realtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_entity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_entity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_entity_proto_goTypes,
		DependencyIndexes: file_pb_entity_proto_depIdxs,
		MessageInfos:      file_pb_entity_proto_msgTypes,
	}.Build()
	File_pb_entity_proto = out.File
	file_pb_entity_proto_rawDesc = nil
	file_pb_entity_proto_goTypes = nil
	file_pb_entity_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	//通过城市名称获取天气预报
	GetByName(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error)
	//通过城市id获取天气预报
	GetById(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error)
	//客户端通过流的方式进行发送数据，而服务端采用一次性返回数据
	GetByStream(ctx context.Context, opts ...grpc.CallOption) (Query_GetByStreamClient, error)
	//客户端一次一个数据，如果一个种类，而服务端通过流的方式返回这个类别下的所有数据
	ReturnByStream(ctx context.Context, in *CityRequest, opts ...grpc.CallOption) (Query_ReturnByStreamClient, error)
	//双向流，客户端通过流的方式不断的向服务端发送商品id
	//服务端每接收到一个商品ID后，立即查询商品详情，查到后立即通过流的方式返回给客户端
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (Query_BidirectionalStreamClient, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetByName(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error) {
	out := new(WeatherResponse)
	err := c.cc.Invoke(ctx, "/pb.Query/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetById(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error) {
	out := new(WeatherResponse)
	err := c.cc.Invoke(ctx, "/pb.Query/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetByStream(ctx context.Context, opts ...grpc.CallOption) (Query_GetByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/pb.Query/GetByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryGetByStreamClient{stream}
	return x, nil
}

type Query_GetByStreamClient interface {
	Send(*WeatherRequest) error
	CloseAndRecv() (*StreamResp, error)
	grpc.ClientStream
}

type queryGetByStreamClient struct {
	grpc.ClientStream
}

func (x *queryGetByStreamClient) Send(m *WeatherRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryGetByStreamClient) CloseAndRecv() (*StreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) ReturnByStream(ctx context.Context, in *CityRequest, opts ...grpc.CallOption) (Query_ReturnByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[1], "/pb.Query/ReturnByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryReturnByStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ReturnByStreamClient interface {
	Recv() (*CityResp, error)
	grpc.ClientStream
}

type queryReturnByStreamClient struct {
	grpc.ClientStream
}

func (x *queryReturnByStreamClient) Recv() (*CityResp, error) {
	m := new(CityResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (Query_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[2], "/pb.Query/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryBidirectionalStreamClient{stream}
	return x, nil
}

type Query_BidirectionalStreamClient interface {
	Send(*Product) error
	Recv() (*Product, error)
	grpc.ClientStream
}

type queryBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *queryBidirectionalStreamClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *queryBidirectionalStreamClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	//通过城市名称获取天气预报
	GetByName(context.Context, *WeatherRequest) (*WeatherResponse, error)
	//通过城市id获取天气预报
	GetById(context.Context, *WeatherRequest) (*WeatherResponse, error)
	//客户端通过流的方式进行发送数据，而服务端采用一次性返回数据
	GetByStream(Query_GetByStreamServer) error
	//客户端一次一个数据，如果一个种类，而服务端通过流的方式返回这个类别下的所有数据
	ReturnByStream(*CityRequest, Query_ReturnByStreamServer) error
	//双向流，客户端通过流的方式不断的向服务端发送商品id
	//服务端每接收到一个商品ID后，立即查询商品详情，查到后立即通过流的方式返回给客户端
	BidirectionalStream(Query_BidirectionalStreamServer) error
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetByName(context.Context, *WeatherRequest) (*WeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (*UnimplementedQueryServer) GetById(context.Context, *WeatherRequest) (*WeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (*UnimplementedQueryServer) GetByStream(Query_GetByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByStream not implemented")
}
func (*UnimplementedQueryServer) ReturnByStream(*CityRequest, Query_ReturnByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReturnByStream not implemented")
}
func (*UnimplementedQueryServer) BidirectionalStream(Query_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Query/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetByName(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Query/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetById(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServer).GetByStream(&queryGetByStreamServer{stream})
}

type Query_GetByStreamServer interface {
	SendAndClose(*StreamResp) error
	Recv() (*WeatherRequest, error)
	grpc.ServerStream
}

type queryGetByStreamServer struct {
	grpc.ServerStream
}

func (x *queryGetByStreamServer) SendAndClose(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryGetByStreamServer) Recv() (*WeatherRequest, error) {
	m := new(WeatherRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Query_ReturnByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ReturnByStream(m, &queryReturnByStreamServer{stream})
}

type Query_ReturnByStreamServer interface {
	Send(*CityResp) error
	grpc.ServerStream
}

type queryReturnByStreamServer struct {
	grpc.ServerStream
}

func (x *queryReturnByStreamServer) Send(m *CityResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QueryServer).BidirectionalStream(&queryBidirectionalStreamServer{stream})
}

type Query_BidirectionalStreamServer interface {
	Send(*Product) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type queryBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *queryBidirectionalStreamServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func (x *queryBidirectionalStreamServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByName",
			Handler:    _Query_GetByName_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _Query_GetById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetByStream",
			Handler:       _Query_GetByStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReturnByStream",
			Handler:       _Query_ReturnByStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _Query_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/entity.proto",
}
